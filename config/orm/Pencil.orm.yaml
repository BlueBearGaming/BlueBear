App\Entity\Map\PencilSet:
    table: pencil_set
    repositoryClass: App\Entity\Map\PencilRepository

    id:
        id:
            type: integer
            generator:
                strategy: auto
    fields:
        name:
            type: string
        label:
            type: string
        type:
            type: string
        description:
            type: text
        width:
            type: float
        height:
            type: float
        imageX:
            type: integer
        imageY:
            type: float
        boundingBox:
            type: array

            ", "allowedLayers", "image"
        tags:
            type: array
        allowedLayerTypes:
            type: simple_array
            nullable: true
        spriteX:
            type: integer
            nullable: true
        spriteY:
            type: integer
            nullable: true

    oneToOne:
        image:
            targetEntity: App\Entity\Editor\Image
            inversedBy: pencil
            cascade:
                - persist
                - remove
            joinColum:
                name: image_id
                referencedColumnName: id
                nullable: true
                onDelete: "SET NULL"
    manyToOne:
        pencilSet:
            targetEntity: App\Entity\Map\PencilSet
            inversedBy: pencils
            fetch: EAGER
    oneToMany:
        mapItems:
            targetEntity: App\Entity\Map\MapItem
            mappedBy: pencil


        /**
        * Position of the image inside the sprite sheet in pixels
        *
        * @ORM\Column(name="sprite_x", type="integer", nullable=true)
        * @Serializer\Expose()
        */
        protected $spriteX;

        /**
        * Position of the image inside the sprite sheet in pixels
        *
        * @ORM\Column(name="sprite_y", type="integer", nullable=true)
        * @Serializer\Expose()
        */
        protected $spriteY;

        /**
        * Size of the image in pixels
        *
        * @ORM\Column(name="sprite_width", type="integer", nullable=true)
        * @Serializer\Expose()
        */
        protected $spriteWidth;

        /**
        * Size of the image in pixels
        *
        * @ORM\Column(name="sprite_height", type="integer", nullable=true)
        * @Serializer\Expose()
        */
        protected $spriteHeight;

        /**
        * Cells that physically contains the object (the one able to capture events)
        *
        * @ORM\Column(name="bounding_box", type="array", nullable=true)
        * @Serializer\Expose()
        */
        protected $boundingBox = [[0, 0]];

        public function getImageX()
        {
        return $this->imageX;
        }

        public function setImageX($imageX)
        {
        $this->imageX = $imageX;
        return $this;
        }

        public function getImageY()
        {
        return $this->imageY;
        }

        public function setImageY($imageY)
        {
        $this->imageY = $imageY;
        return $this;
        }

        public function getBoundingBox()
        {
        return $this->boundingBox;
        }

        public function setBoundingBox($boundingBox)
        {
        $this->boundingBox = $boundingBox;
        return $this;
        }

        /**
        * @return PencilSet
        */
        public function getPencilSet()
        {
        return $this->pencilSet;
        }

        public function setPencilSet(PencilSet $pencilSet)
        {
        $this->pencilSet = $pencilSet;
        }

        /**
        *
        * @return array
        */
        public function getAllowedLayerTypes()
        {
        return $this->allowedLayerTypes;
        }

        public function setAllowedLayerTypes(array $allowedLayerTypes = null)
        {
        $this->allowedLayerTypes = $allowedLayerTypes;
        }

        public function isLayerTypeAllowed($layerType)
        {
        return in_array($layerType, $this->allowedLayerTypes);
        }

        /**
        * Return item's image
        *
        * @return Image
        */
        public function getImage()
        {
        return $this->image;
        }

        /**
        * Set item's image
        *
        * @param Image $image
        * @return $this
        */
        public function setImage(Image $image = null)
        {
        $this->image = $image;
        return $this;
        }

        /**
        * @return mixed
        */
        public function getMapItems()
        {
        return $this->mapItems;
        }

        /**
        * @param mixed $mapItems
        */
        public function setMapItems($mapItems)
        {
        $this->mapItems = $mapItems;
        }

        /**
        * @return mixed
        */
        public function getSpriteX()
        {
        return $this->spriteX;
        }

        /**
        * @param mixed $spriteX
        */
        public function setSpriteX($spriteX)
        {
        $this->spriteX = $spriteX;
        }

        /**
        * @return mixed
        */
        public function getSpriteY()
        {
        return $this->spriteY;
        }

        /**
        * @param mixed $spriteY
        */
        public function setSpriteY($spriteY)
        {
        $this->spriteY = $spriteY;
        }

        /**
        * @return mixed
        */
        public function getSpriteWidth()
        {
        return $this->spriteWidth;
        }

        /**
        * @param mixed $spriteWidth
        */
        public function setSpriteWidth($spriteWidth)
        {
        $this->spriteWidth = $spriteWidth;
        }

        /**
        * @return mixed
        */
        public function getSpriteHeight()
        {
        return $this->spriteHeight;
        }

        /**
        * @param mixed $spriteHeight
        */
        public function setSpriteHeight($spriteHeight)
        {
        $this->spriteHeight = $spriteHeight;
        }


}
